//#region DEÄžÄ°ÅžKENLER ATAMA
let scene, camera, renderer, controls;
let kolonGrubu;
let soldiyagonelGrup //
let saÄŸdiyagonelGrup
let zeminesasfonk; //
let makasÃ§oÄŸal
let yankiriÅŸcons
let makasiÃ§bracingAltCons
let makasiÃ§ibracingTamCons
let Ã‡aprazYanCons
let Ã‡atÄ±Ã‡AprazCons 
let totemcons
let CepheKaplamaCons
let controlFly
let SolÃ‡atÄ±Kaplamacons

let currentGroundMesh = null;
window.MKSHG=35 // MAKSÄ°MUM HOL GENÄ°ÅžLÄ°ÄžÄ°

// Global deÄŸiÅŸkenler
let A, B, H, K;  // En, Boy, YÃ¼kseklik deÄŸiÅŸkenleri
window.YATAYHOLGENÄ°ÅžLÄ°ÄžÄ°; 
window.YATAYHOLSAYISI;
window.YATAYAKSSAYISI; 

let createButton; 
//#endregion

//#region IMPORT'lar

// Nesneler
import { YATAYKOLONGRUBU, SOLDÄ°YAGONELGRUBU, SAÄžDÄ°YAGONELGRUBU, MakasGrupÃ‡oÄŸalt, YanKiriÅŸ_1, MakasÄ°Ã§iAltTamBracing, 
  Bracing_MakasÄ°Ã§iTam, Ã‡aprazYanKomple, Ã‡atÄ±Ã‡apraz1MakasGrup, Ã‡atÄ±Ã‡aprazTam, Totem1,CepheKaplamaSaÄŸSol, SolÃ‡atÄ±Kaplama,
  MK_UZUNLUK  } from './nesneler.js';  // 

// Hesaplar
import { DÄ°KMEHESAPLA, hesaplaDÃ¼ÅŸeyAks, hesaplaYatayKolon, Ã‡ATIEÄžÄ°MHETKÄ°SÄ°HESAP, MAKASBOYUHESAP, 
  ZEMÄ°NESASEBATHESAP, YanBaÄŸKiriÅŸHesap , Ã‡aprazYanHesap, KaplamaSÄ±nÄ±rHesap, ArkaKaplamaSÄ±nÄ±r } from './hesapla.js'; 

// Hesapla Const
  import { MKAÃ‡I, YanKiriÅŸArasÄ±, YanBaÄŸKiriÅŸAdet, YATAYHOLGENÄ°ÅžLÄ°ÄžÄ°, DÃœÅžEYHOLSAYISI, DÃœÅžEYHOLGENÄ°ÅžLÄ°ÄžÄ° ,
  esaszeminA, esaszeminB, MAKAS_YÃœKSEKL_HESAPLA, Ã‡aprazYÃ¼kseklik} from './hesapla.js';

// Geometriler
import { YatayÃ‡aprazÃ‡ap, KOLONEBAT, KOLON_BOX1 , MK_EN, YATAY_MK_GEO_1 } from './geometriler.js';  // 

// Malzemeler
import { Ã‡imZeminMalzeme1  } from './malzemeler.js';  // 

//#endregion 

// #region FORM - HTML vs Ä°ÅžLEMLERÄ°...
// HTML form yapÄ±sÄ±nÄ± tamamen JavaScript ile oluÅŸturma ve sayfaya ekleme
function createFormContainer() {
  const formContainer = document.createElement('div');
  formContainer.id = 'formContainer'; 
  formContainer.style.position = 'absolute';
  formContainer.style.top = '3px';
  formContainer.style.left = '10px';
  formContainer.style.zIndex = '10';  // Formun z-index deÄŸeri
  formContainer.style.backgroundColor = 'rgba(240, 240, 240, 0.9)';
  formContainer.style.padding = '5px';
  formContainer.style.border = '1px solid #000';
  formContainer.style.borderRadius = '8px';
  formContainer.style.width = '200px';

  // Formu sayfaya ekleyin
  document.body.appendChild(formContainer);   
  return formContainer;
}

// `createFormContainer` fonksiyonunu Ã§aÄŸÄ±rÄ±n
const formContainer = createFormContainer();


function createCameraIconWithTooltip() {
  // Kamera ikonu oluÅŸtur ve doÄŸrudan `body`'ye ekle
  const cameraIcon = document.createElement('img');
  cameraIcon.src = 'textures/cameraicon.png';       // Kamera ikonunun yolunu belirtin
  cameraIcon.style.position = 'fixed';
  cameraIcon.style.top = '170px';                   // Ekranda konumlandÄ±rma
  cameraIcon.style.left = '20px';
  cameraIcon.style.width = '24px';
  cameraIcon.style.height = '15px';
  cameraIcon.style.cursor = 'pointer';
  cameraIcon.style.zIndex = '9999';
  cameraIcon.title = "Kamera ayarlarÄ±nÄ± sÄ±fÄ±rlayÄ±n"; // MasaÃ¼stÃ¼ iÃ§in tooltip

  // Mobil cihazlarda dokunulduÄŸunda gÃ¶sterilecek mesaj kutusu
  const tooltip = document.createElement('div');
  tooltip.innerText = "Kamera ayarlarÄ±nÄ± sÄ±fÄ±rlayÄ±n";
  tooltip.style.position = 'fixed';
  tooltip.style.top = '200px';                     // Tooltip'in konumunu ikona gÃ¶re ayarlayÄ±n
  tooltip.style.left = '20px';
  tooltip.style.padding = '5px 10px';
  tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
  tooltip.style.color = 'white';
  tooltip.style.borderRadius = '5px';
  tooltip.style.display = 'none';                  // BaÅŸlangÄ±Ã§ta gizli
  tooltip.style.zIndex = '10000';
  document.body.appendChild(tooltip);

  // Kamera ikonuna tÄ±klama ve dokunma olaylarÄ±nÄ± ekle
  cameraIcon.addEventListener('click', () => {
    camera.position.set(-60, 35, 55);              // Kamera pozisyonunu ayarla
    controls.target.set(A / 3, H / 3, -B / 3);     // Odak noktasÄ±nÄ± belirle
    controls.update();
  });

  // Mobil cihazlarda dokunulduÄŸunda tooltip'i gÃ¶ster
  cameraIcon.addEventListener('touchstart', () => {
    tooltip.style.display = 'block';
    setTimeout(() => {
      tooltip.style.display = 'none';
    }, 2000); // Tooltip 2 saniye sonra kaybolur
  });

  // Kamera ikonunu doÄŸrudan body'ye ekle
  document.body.appendChild(cameraIcon);
}

// Fonksiyonu Ã§aÄŸÄ±rarak kamera ikonu ve tooltipâ€™i oluÅŸtur
createCameraIconWithTooltip();



// ButonlarÄ± ve formu oluÅŸturmak iÃ§in bir fonksiyon
function createFormAndButton() {
  // Form Container oluÅŸturma
  const formContainer = document.createElement('div');
  formContainer.id = 'formContainer';
  formContainer.style.position = 'absolute';
  formContainer.style.top = '3px';
  formContainer.style.left = '10px';
  formContainer.style.zIndex = '10';
  formContainer.style.backgroundColor = 'rgba(240, 240, 240, 0.9)';
  formContainer.style.padding = '5px';
  formContainer.style.border = '1px solid #000';
  formContainer.style.borderRadius = '8px';
  formContainer.style.width = '200px';

  // Tablo elemanlarÄ±nÄ± oluÅŸturma
  const table = document.createElement('table');
  table.style.width = '100%';

  // Bir satÄ±r ve hÃ¼creler oluÅŸturan yardÄ±mcÄ± iÅŸlev
  function createRow(labelText, inputId, defaultValue) {
      const row = document.createElement('tr');
      const labelCell = document.createElement('td');
      labelCell.style.padding = '5px';
      labelCell.style.textAlign = 'right';
      labelCell.textContent = labelText;

      const inputCell = document.createElement('td');
      inputCell.style.padding = '6px';

      const input = document.createElement('input');
      input.type = 'number';
      input.id = inputId;
      input.value = defaultValue;
      input.style.width = '100%';
      input.style.padding = '5px';
      input.style.borderRadius = '4px';
      input.style.border = '1px solid #ccc';

      inputCell.appendChild(input);
      row.appendChild(labelCell);
      row.appendChild(inputCell);

      return row;
  }

  // Tabloya satÄ±rlarÄ± ekleme
  table.appendChild(createRow('En (A):', 'A', '60'));
  table.appendChild(createRow('Boy (B):', 'B', '50'));
  table.appendChild(createRow('YÃ¼kseklik (H):', 'H', '6'));
  table.appendChild(createRow('Aks ArasÄ±:', 'K', '6'));

  // Tabloyu formContainer iÃ§ine ekleme
  formContainer.appendChild(table);

  // 3D BÄ°NA MODELLE butonunu ekleme
  createButton = document.createElement('button');
  createButton.id = 'createCube';
  createButton.textContent = '3D BÄ°NA MODELLE';
  createButton.style.marginTop = '10px';
  createButton.style.width = '100%';
  createButton.style.padding = '10px';
  createButton.style.backgroundColor = '#007BFF';
  createButton.style.color = 'white';
  createButton.style.border = 'none';
  createButton.style.borderRadius = '4px';
  createButton.style.cursor = 'pointer';
  formContainer.appendChild(createButton);

  // FormContainer'Ä± body iÃ§ine ekleme
  document.body.appendChild(formContainer);
}

// Mevcut `createFormContainer` fonksiyonunun altÄ±na ekleyin
function adjustFormContainerWidth() {
  const formContainer = document.getElementById('formContainer');
  if (formContainer) {
    formContainer.style.width = `${Math.min(window.innerWidth * 0.9, 200)}px`; // Maksimum geniÅŸlik 200px
  }
}

// Ekran yeniden boyutlandÄ±rÄ±ldÄ±ÄŸÄ±nda veya yÃ¶n deÄŸiÅŸtiÄŸinde geniÅŸliÄŸi ayarla
window.addEventListener('resize', adjustFormContainerWidth);
window.addEventListener('orientationchange', adjustFormContainerWidth);

// Sayfa yÃ¼klendiÄŸinde baÅŸlangÄ±Ã§ta boyut ayarlamasÄ± yap
adjustFormContainerWidth();

// Bu fonksiyonu Ã§aÄŸÄ±rarak buton ve formu oluÅŸturabilirsiniz
createFormAndButton();

// Butona click olay iÅŸleyicisi ekleyelim
createButton.addEventListener('click', () => {
    const A = parseFloat(document.getElementById('A').value);
    const B = parseFloat(document.getElementById('B').value);
    const H = parseFloat(document.getElementById('H').value);
    const K = parseFloat(document.getElementById('K').value);

    // Burada 3D bina modelleme iÅŸlemlerini baÅŸlatabilirsiniz
});

// ZEMÄ°NESAS sabiti
const ZEMÄ°NESAS_TEXTURE = new THREE.TextureLoader().load('textures/zemin9.png');
// #endregion 

//#region IÅŸÄ±k AyarlarÄ±
// YÃ¶nlÃ¼ Ä±ÅŸÄ±k ekleme fonksiyonu
function addDirectionalLight() {
  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(5, 5, 5).normalize();
  scene.add(light);
}
// Ambient light ekleme fonksiyonu
function addAmbientLight() {
  const ambientLight = new THREE.AmbientLight(0x404040, 1); // YumuÅŸak aydÄ±nlatma
  scene.add(ambientLight);
}
//#endregion

//#regionðŸ”¥ INIT fonksiyonu & BUTONðŸ”¥
function init() {
  // Sahne oluÅŸturma
  scene = new THREE.Scene();

//#region Kamera ayarlarÄ±
  camera = new THREE.PerspectiveCamera(25, window.innerWidth / window.innerHeight, 0.1, 1000);
//#endregion



  // Renderer
  renderer = new THREE.WebGLRenderer();
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  document.body.appendChild(renderer.domElement);

  // OrbitControls ekleme
  controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableZoom = true;

    // IÅŸÄ±klarÄ± ekleme
    addDirectionalLight();
    addAmbientLight();
//#endregion
  //#region Ã‡im - GÃ¶kyÃ¼zÃ¼ & Zemin Ekleme
  // Ã‡im Zemin ekleme
  function createGround() {
    // Geometri oluÅŸturma
    const groundGeometry = new THREE.PlaneGeometry(300, 200);  // BÃ¼yÃ¼k bir zemin dÃ¼zlemi
      // Mesh oluÅŸturma ve ayarlama
    const groundMesh = new THREE.Mesh(groundGeometry, Ã‡imZeminMalzeme1);
    groundMesh.rotation.x = -Math.PI / 2; // Yatay hale getiriyoruz
    groundMesh.position.set(50, -0.2, -50);  // X, Y, Z koordinatlarÄ±
    const groundGroup = new THREE.Group();  // Zemini bir grup iÃ§inde organize ediyoruz
    groundGroup.add(groundMesh);
    scene.add(groundGroup);
    return groundGroup;  // Ä°leride kontrol iÃ§in zemini geri dÃ¶ndÃ¼rÃ¼yoruz
  }
  const ZeminEkleConst = createGround();

// GÃ¶kyÃ¼zÃ¼ kÃ¼resi ekleme
function createSky(scene) {
  const textureLoader = new THREE.TextureLoader();
  const skyTexture = textureLoader.load('textures/sky.png');
  
  const skyGeometry = new THREE.SphereGeometry(1000, 60, 40); // BÃ¼yÃ¼k bir kÃ¼re, gÃ¶kyÃ¼zÃ¼ etkisi iÃ§in
  const skyMaterial = new THREE.MeshBasicMaterial({
      map: skyTexture,
      side: THREE.BackSide // KÃ¼renin iÃ§ yÃ¼zeyi gÃ¶rÃ¼nsÃ¼n
  });
  
  const skyMesh = new THREE.Mesh(skyGeometry, skyMaterial);
  skyMesh.position.y = 500; 
  skyMesh.position.x = 500; 
  skyMesh.position.z = 500; 

  // GÃ¶kyÃ¼zÃ¼ kÃ¼resini sahneye ekleme
  scene.add(skyMesh);
}
createSky(scene);

// ZEMÄ°NESAS fonksiyonu
function ZEMÄ°NESAS() {
  const groundTexture = ZEMÄ°NESAS_TEXTURE;
  groundTexture.wrapS = THREE.RepeatWrapping;
  groundTexture.wrapT = THREE.RepeatWrapping;
  groundTexture.repeat.set(1, 1);  // Zemin dokusunun tekrarlanmasÄ±nÄ± saÄŸlar

  const groundGeometry = new THREE.PlaneGeometry(esaszeminA, esaszeminB);  // Zemin ebatlarÄ± A+10 ve B+10
  const groundMaterial = new THREE.MeshBasicMaterial({
    map: groundTexture,
    side: THREE.DoubleSide // Zeminin iki yÃ¼zÃ¼ne de doku ekler
  });

  const groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);
  groundMesh.rotation.x = -Math.PI / 2;  // Yatay hale getiriyoruz
  groundMesh.position.set(A/2, -0.1,-B/2);  // Pozisyon x=-5, z=5 olacak ÅŸekilde ayarlanÄ±yor
  return groundMesh;

}

document.addEventListener('keydown', function(event) {
  // Alt + M tuÅŸ kombinasyonunu kontrol edin
  if (event.altKey && (event.key === 'm' || event.key === 'M')) {
      document.getElementById('createCube').click();
  }
});
//#endregion
  //#regionðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ BUTONA BASINCA OLACAKLAR   ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥
  document.getElementById('createCube').addEventListener('click', () => {
    // Ã–nceki kolon grubunu temizleyelim
    if (kolonGrubu) {scene.remove(kolonGrubu);}
    if (soldiyagonelGrup) {scene.remove(soldiyagonelGrup);}
    if (saÄŸdiyagonelGrup) {scene.remove(saÄŸdiyagonelGrup);}
    if (zeminesasfonk) { scene.remove(zeminesasfonk); }
    if (currentGroundMesh) {scene.remove(currentGroundMesh);}  // Ã–nceki zemini sahneden kaldÄ±rÄ±yoruz
    if (makasÃ§oÄŸal) { scene.remove(makasÃ§oÄŸal);}
    if (yankiriÅŸcons) { scene.remove(yankiriÅŸcons);}
    if (makasiÃ§ibracingTamCons) { scene.remove(makasiÃ§ibracingTamCons);}
    if (Ã‡aprazYanCons) { scene.remove(Ã‡aprazYanCons);}
    if (Ã‡atÄ±Ã‡AprazCons) { scene.remove(Ã‡atÄ±Ã‡AprazCons);}
    if (totemcons) { scene.remove(totemcons);}
    if (CepheKaplamaCons) { scene.remove(CepheKaplamaCons);}
    if (SolÃ‡atÄ±Kaplamacons) { scene.remove(SolÃ‡atÄ±Kaplamacons);}


       
    // A, B, H deÄŸerlerini inputlardan alalÄ±m  - BUTON HESAP !!!!!!!!!!!!!!!!!!!!!
    A = parseFloat(document.getElementById('A').value);   // En (A)
    B = parseFloat(document.getElementById('B').value);   // Boy (B)
    H = parseFloat(document.getElementById('H').value);   // YÃ¼kseklik (H)
    K = parseFloat(document.getElementById('K').value);   // Aks ArasÄ± (K)

    hesaplaDÃ¼ÅŸeyAks(B, K); 
    hesaplaYatayKolon(A); 
    MAKAS_YÃœKSEKL_HESAPLA(YATAYHOLGENÄ°ÅžLÄ°ÄžÄ°, H)
    Ã‡ATIEÄžÄ°MHETKÄ°SÄ°HESAP(H, YATAYHOLGENÄ°ÅžLÄ°ÄžÄ°, MKAÃ‡I);
    MAKASBOYUHESAP()
    ZEMÄ°NESASEBATHESAP(A,B)
    DÄ°KMEHESAPLA(H)
    YanBaÄŸKiriÅŸHesap(H)
    Ã‡aprazYanHesap() 
    YATAY_MK_GEO_1(YATAYHOLGENÄ°ÅžLÄ°ÄžÄ°, MK_UZUNLUK)
    KaplamaSÄ±nÄ±rHesap ()
        console.log("ArkaKaplamaSÄ±nÄ±r - app iÃ§i ",ArkaKaplamaSÄ±nÄ±r )

    /*KOLON_BOX1(H)*/
    console.log("KOLONEBAT deÄŸeri:", KOLONEBAT); // DeÄŸeri kontrol ediyoruz
    
    kolonGrubu = YATAYKOLONGRUBU(H);  // Kolon grubu oluÅŸturuluyor
    soldiyagonelGrup = SOLDÄ°YAGONELGRUBU(H);
    saÄŸdiyagonelGrup = SAÄžDÄ°YAGONELGRUBU(H);
    makasÃ§oÄŸal = MakasGrupÃ‡oÄŸalt(H);
    zeminesasfonk =ZEMÄ°NESAS();
    yankiriÅŸcons = YanKiriÅŸ_1(H, A);
    makasiÃ§ibracingTamCons =  Bracing_MakasÄ°Ã§iTam(H)
    Ã‡aprazYanCons = Ã‡aprazYanKomple(H)
    Ã‡atÄ±Ã‡AprazCons = Ã‡atÄ±Ã‡aprazTam(H)
    totemcons= Totem1(H)
    CepheKaplamaCons = CepheKaplamaSaÄŸSol(B, H, A)
    SolÃ‡atÄ±Kaplamacons = SolÃ‡atÄ±Kaplama(H, B,)
    
    scene.add(kolonGrubu);  // KOLON1 ile oluÅŸturulan kolonlarÄ± sahneye ekle
    scene.add(soldiyagonelGrup);  // Sahneye ekle
    scene.add(saÄŸdiyagonelGrup);  // Sahneye ekle
    const zemin = ZEMÄ°NESAS();  // ZEMÄ°NESAS fonksiyonunu Ã§aÄŸÄ±rÄ±yoruz
    scene.add(zemin);  // Zemin sahneye ekleniyor
    currentGroundMesh = zemin;
    scene.add(makasÃ§oÄŸal);
    scene.add(yankiriÅŸcons);
    scene.add(makasiÃ§ibracingTamCons);
    scene.add(Ã‡aprazYanCons);
    scene.add(Ã‡atÄ±Ã‡AprazCons);
    scene.add(totemcons)
    scene.add(CepheKaplamaCons)
    scene.add(SolÃ‡atÄ±Kaplamacons)


//
    // Kamera pozisyonu
  camera.position.set(-60, 35, 55);
// `controls` ile odak noktasÄ± belirleme
  controls.target.set(A/3, H/3, -B/3);

  // FlyControls baÅŸlatma ve ayar yapma
  controlFly = new THREE.FlyControls(camera, renderer.domElement);
  controlFly.movementSpeed = 2.0;
  controlFly.rollSpeed = 0.02;
  controlFly.dragToLook = true;
  controlFly.autoForward = false;


  controls.update();
  
    renderer.render(scene, camera);
    animate();
  });
}
// #endregionðŸ”¥

//#region animate
function animate() {
  requestAnimationFrame(animate);
  controls.update();  // Kontrolleri gÃ¼ncelle
  if (controlFly) controlFly.update(0.1); // Delta zamanÄ± geÃ§in

  renderer.render(scene, camera);  // Sahneyi render et 
}
//#endregion

//#region init
init();
// Resize olduÄŸunda ekranÄ±n boyutlarÄ±nÄ± gÃ¼ncelle
window.addEventListener('resize', () => {
    const width = window.innerWidth;
    const height = window.innerHeight;

    // Kamera en-boy oranÄ±nÄ± gÃ¼ncelle
    camera.aspect = width / height;
    camera.updateProjectionMatrix();

    // Renderer boyutlarÄ±nÄ± gÃ¼ncelle
    renderer.setSize(width, height);
  });
  //#endregion

//#region Ä°LK SAYFA AÃ‡ILIÅž MODEL GÃ–STER

  window.addEventListener('DOMContentLoaded', () => {
    // VarsayÄ±lan deÄŸerleri inputlardan alarak A, B, H ve K'ya atÄ±yoruz
    const A = parseFloat(document.getElementById('A').value);
    const B = parseFloat(document.getElementById('B').value);
    const H = parseFloat(document.getElementById('H').value);
    const K = parseFloat(document.getElementById('K').value);

    // VarsayÄ±lan deÄŸerlere gÃ¶re modeli oluÅŸtur
    if (document.getElementById('createCube')) {
        document.getElementById('createCube').click(); // Modelleme butonuna tÄ±klayarak modeli otomatik oluÅŸturuyoruz
    }
});
//#endregion

// #region ÃœÃ§gen ve kaydÄ±rma Ã§ubuÄŸu iÃ§in HTML elemanlarÄ±nÄ± oluÅŸturma
// ÃœÃ§gen ve kaydÄ±rma Ã§ubuÄŸu iÃ§in ana wrapper oluÅŸturma
const triangleWrapper = document.createElement("div");
triangleWrapper.style.position = "absolute";
triangleWrapper.style.top = "20px"; // Formun saÄŸ tarafÄ±na hizalayÄ±n
triangleWrapper.style.left = "250px"; // Formdan biraz boÅŸluk bÄ±rakÄ±n
triangleWrapper.style.display = "flex";
triangleWrapper.style.flexDirection = "column";
triangleWrapper.style.alignItems = "center";

// OpaklÄ±k yazÄ±sÄ± ekleme
const opacityLabel = document.createElement("span");
opacityLabel.textContent = "OpaklÄ±k";
opacityLabel.style.fontSize = "14px";
opacityLabel.style.color = "black";
opacityLabel.style.marginBottom = "5px";
triangleWrapper.appendChild(opacityLabel);

// ÃœÃ§gen ÅŸekli oluÅŸturma (sabit kalacak)
const opacityTriangle = document.createElement("div");
opacityTriangle.style.width = "0";
opacityTriangle.style.height = "0";
opacityTriangle.style.borderTop = "7px solid transparent";
opacityTriangle.style.borderBottom = "7px solid transparent";
opacityTriangle.style.borderLeft = "80px solid rgba(0, 0, 0, 0.5)";
triangleWrapper.appendChild(opacityTriangle);

// Ä°ÅŸaretÃ§i olarak hareket edecek dikdÃ¶rtgen oluÅŸturma
const sliderHandle = document.createElement("div");
sliderHandle.style.position = "absolute";
sliderHandle.style.width = "10px";
sliderHandle.style.height = "20px";
sliderHandle.style.backgroundColor = "rgba(0, 0, 0, 0.5)"; // YarÄ± saydam siyah
sliderHandle.style.cursor = "pointer";
sliderHandle.style.top = "18px"; // ÃœÃ§genin Ã¼zerine hizalamak iÃ§in
sliderHandle.style.left = "10px"; // BaÅŸlangÄ±Ã§ konumu
triangleWrapper.appendChild(sliderHandle);

// ElemanlarÄ± DOM'a ekleme
document.body.appendChild(triangleWrapper);

let isDragging = false;

// MasaÃ¼stÃ¼ iÃ§in sÃ¼rÃ¼kleme baÅŸlatma
sliderHandle.addEventListener("mousedown", function() {
  isDragging = true;
});

// Mobil iÃ§in sÃ¼rÃ¼kleme baÅŸlatma
sliderHandle.addEventListener("touchstart", function() {
  isDragging = true;
});

// SÃ¼rÃ¼kleme bitirme olaylarÄ±
document.addEventListener("mouseup", function() {
  isDragging = false;
});

document.addEventListener("touchend", function() {
  isDragging = false;
});

// SÃ¼rÃ¼kleme esnasÄ±nda iÅŸaretÃ§iyi hareket ettirme (MasaÃ¼stÃ¼ ve Mobil)
function moveSlider(event) {
  if (isDragging) {
    const minLeft = 0;
    const maxLeft = 70;

    // Mouse veya touch konumunu alÄ±n
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;
    let newLeft = clientX - triangleWrapper.offsetLeft;
    newLeft = Math.max(minLeft, Math.min(maxLeft, newLeft));

    sliderHandle.style.left = `${newLeft}px`;

    /*const opacityValue = 0.4 + ((newLeft - minLeft) / (maxLeft - minLeft)) * (1 - 0.2); */
    const opacityValue = 1 - ((newLeft - minLeft) / (maxLeft - minLeft)) * (1 - 0.1);

    /*SolÃ‡atÄ±Kaplamacons*/

    if (typeof CepheKaplamaCons !== "undefined") {
      CepheKaplamaCons.children.forEach(mesh => {
        if (mesh.material) {
          mesh.material.opacity = opacityValue;
          mesh.material.needsUpdate = true;
        }
      });
    }
    
    if (typeof SolÃ‡atÄ±Kaplamacons !== "undefined") {
      SolÃ‡atÄ±Kaplamacons.children.forEach(mesh => {
        if (mesh.material) {
          mesh.material.opacity = opacityValue;
          mesh.material.needsUpdate = true;
        }
      });
    }
      }
}

// MasaÃ¼stÃ¼ iÃ§in sÃ¼rÃ¼kleme hareketini algÄ±la
document.addEventListener("mousemove", moveSlider);

// Mobil iÃ§in sÃ¼rÃ¼kleme hareketini algÄ±la
document.addEventListener("touchmove", moveSlider);

// #endregion

